/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.inpas.parser.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

public class LibraryTest {
	
	
    @Test public void testSomeLibraryMethod() throws IOException {

        StringBuilder sb = new StringBuilder();

        //File file = new File("C:/Users/y_sazankov/eclipse-java/TLV_Parser/tlv/Currency.pst");
        System.out.println("Hi!");
	    //if (!file.exists()){
	    //    throw new FileNotFoundException(file.getName());
	    //}
	    Path path = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Currency.pst");
	    Path path2 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Paysys.pst");
	    Path path3 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Card.pst");
	    Path path4 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Keys.pst");
	    Path path5 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Account.pst");
	    Path path6 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Template.pst");
	    Path path7 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/Profile.pst");
	    Path path8 = Paths.get("C:/git/My/JavaProjects/TLV_Parser/tlv/UsersGroups.pst");
	    byte[] data = Files.readAllBytes(path);
	    byte[] data2 = Files.readAllBytes(path2);
	    byte[] data3 = Files.readAllBytes(path3);
	    byte[] data4 = Files.readAllBytes(path4);
	    byte[] data5 = Files.readAllBytes(path5);
	    byte[] data6 = Files.readAllBytes(path6);
	    byte[] data7 = Files.readAllBytes(path7);
	    byte[] data8 = Files.readAllBytes(path8);
        ParamsParser parser = new ParamsParser();
        parser.init();
        try {
        	CurrencyPreset cur = parser.parse(data, CurrencyPreset.class);
            PaymentSystemPreset paym = parser.parse(data2, PaymentSystemPreset.class);
            CardProductPreset product = parser.parse(data3, CardProductPreset.class);
            SecurityKeyPreset keys = parser.parse(data4, SecurityKeyPreset.class);
            AccountTypePreset account = parser.parse(data5, AccountTypePreset.class);
            TemplatePreset templates = parser.parse(data6, TemplatePreset.class);
            TerminalProfilePreset profile = parser.parse(data7, TerminalProfilePreset.class);
            UsersGroupPreset users = parser.parse(data8, UsersGroupPreset.class);
            String str = profile.getTerminalProfilePreset().get(0).getHotlinePhoneMessage();
            
        }catch(Exception ex) {
        	System.out.println("Error parsing:" + ex);
        }
        
        //
        //keys.getSecurityKeyPreset();
        //account.getAccountTypePreset();
       
        //preset.getCurrency().add(e)
    }
    public static String bytesToHex(byte[] bytes) {
        final char[] hexArray = "0123456789ABCDEF".toCharArray();
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }
    
    public static byte[] toByteArray(List<Byte> in) {
        final int n = in.size();
        byte ret[] = new byte[n];
        for (int i = 0; i < n; i++) {
            ret[i] = in.get(i);
        }
        return ret;
    }
    
    private static byte[] toBytes(char[] chars) {
        CharBuffer charBuffer = CharBuffer.wrap(chars);
        ByteBuffer byteBuffer = Charset.forName("UTF-8").encode(charBuffer);
        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(),
                byteBuffer.position(), byteBuffer.limit());
        Arrays.fill(charBuffer.array(), '\u0000'); // clear sensitive data
        Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
        return bytes;
    }
}
